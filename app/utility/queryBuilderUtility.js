/**
 * QueryBuilder class for building MongoDB queries with search, filter, sort, pagination, and field selection capabilities.
 */
class QueryBuilder {
  /**
   * Constructor for QueryBuilder.
   * @param {Query} modelQuery The initial query object generated by Mongoose like todos.find().
   * @param {object} query The query object containing search terms, filters, pagination, etc maybe req.query.
   */
  constructor(modelQuery, query) {
    this.modelQuery = modelQuery;
    this.query = query;
  }

  /**
   * Adds search functionality to the query.
   * @param {string[]} searchableFields Array of field names to search in.
   * @returns {QueryBuilder} Returns the QueryBuilder instance for method chaining.
   */
  search(searchableFields) {
    const searchTerm = this?.query?.searchTerm;
    if (searchTerm) {
      this.modelQuery = this.modelQuery.find({
        $or: searchableFields.map((field) => ({
          [field]: { $regex: searchTerm, $options: "i" },
        })),
      });
    }
    return this;
  }

  /**
   * Adds filtering functionality to the query.
   * @returns {QueryBuilder} Returns the QueryBuilder instance for method chaining.
   */
  filter() {
    const queryObj = { ...this.query };
    const excludeFields = ["searchTerm", "sort", "limit", "page", "fields"];
    excludeFields.forEach((el) => delete queryObj[el]);
    this.modelQuery = this.modelQuery.find(queryObj);
    return this;
  }

  /**
   * Adds sorting functionality to the query.
   * @returns {QueryBuilder} Returns the QueryBuilder instance for method chaining.
   */
  sort() {
    const sort = this?.query?.sort?.split(",")?.join(" ") || "-createdAt";
    this.modelQuery = this.modelQuery.sort(sort);
    return this;
  }

  /**
   * Adds pagination functionality to the query.
   * @returns {QueryBuilder} Returns the QueryBuilder instance for method chaining.
   */
  paginate() {
    const page = Number(this?.query?.page) || 1;
    const limit = Number(this?.query?.limit) || 10;
    const skip = (page - 1) * limit;
    this.modelQuery = this.modelQuery.skip(skip).limit(limit);
    return this;
  }

  /**
   * Selects specific fields to include or exclude from the query result.
   * @returns {QueryBuilder} Returns the QueryBuilder instance for method chaining.
   */
  fields() {
    const fields = this?.query?.fields?.split(",")?.join(" ") || "-__v";
    this.modelQuery = this.modelQuery.select(fields);
    return this;
  }

  /**
   * Counts the total number of documents matching the query criteria.
   * @returns {Promise<object>} Returns a promise resolving to an object containing page, limit, total, and totalPage.
   */
  async countTotal() {
    const totalQueries = this.modelQuery.getFilter();
    const total = await this.modelQuery.model.countDocuments(totalQueries);
    const page = Number(this?.query?.page) || 1;
    const limit = Number(this?.query?.limit) || 10;
    const totalPage = Math.ceil(total / limit);

    return {
      page,
      limit,
      total,
      totalPage,
    };
  }
}

export default QueryBuilder;
